use crate::prelude::*;
use radix_engine_common::crypto::{Hash, IsHash};

/// Serializable 32 bytes which **always** serializes as a **hex** string, this is useful
/// since in Radix Wallet Kit we almost always want to serialize bytes into hex and this
/// allows us to skip using
#[derive(
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    SerializeDisplay,
    DeserializeFromStr,
    derive_more::Display,
    derive_more::Debug,
    uniffi::Record,
)]
#[display("{}", self.to_hex())]
#[debug("{}", self.to_hex())]
pub struct Hex32Bytes {
    bytes: Vec<u8>, // FIXME: We REALLY want `[u8; 32]` - but that does not work in UniFFI land with `uniffi::Record` - so we should write an UniffiCustomTypeConverter for this (yet another one...)
}

impl Hex32Bytes {
    /// Instantiates a new `Hex32Bytes` from bytes generated by
    /// a CSPRNG.
    pub fn generate() -> Self {
        Hex32Bytes::from_vec(generate_32_bytes())
            .expect("Should be able to generate 32 bytes.")
    }
}

impl Hex32Bytes {
    pub fn to_hex(&self) -> String {
        hex_encode(self.bytes())
    }
}

impl From<Hash> for Hex32Bytes {
    /// Instantiates a new `Hex32Bytes` from the `Hash` (32 bytes).
    fn from(value: Hash) -> Self {
        Self::from_bytes(&value.into_bytes())
    }
}

impl FromStr for Hex32Bytes {
    type Err = CommonError;

    /// Tries to decode the string `s` into a `Hex32Bytes`. Will fail
    /// if the string is not valid hex or if the decoded bytes does
    /// not have length 32.
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        hex_decode(s)
            .map_err(|_| CommonError::StringNotHex(s.to_owned()))
            .and_then(Self::from_vec)
    }
}

impl HasPlaceholder for Hex32Bytes {
    /// `deadbeef...``
    /// A placeholder used to facilitate unit tests.
    fn placeholder() -> Self {
        Self::placeholder_dead()
    }

    /// A placeholder used to facilitate unit tests.
    fn placeholder_other() -> Self {
        Self::placeholder_fade()
    }
}

impl Hex32Bytes {
    /// `aced...``
    /// A placeholder used to facilitate unit tests.
    pub fn placeholder_aced() -> Self {
        Self::from_str(&"aced".repeat(16)).expect("aced...")
    }

    /// `babe...``
    /// A placeholder used to facilitate unit tests.
    pub fn placeholder_babe() -> Self {
        Self::from_str(&"babe".repeat(16)).expect("babe...")
    }

    /// `cafe...``
    /// A placeholder used to facilitate unit tests.
    pub fn placeholder_cafe() -> Self {
        Self::from_str(&"cafe".repeat(16)).expect("cafe...")
    }

    /// `dead...``
    /// A placeholder used to facilitate unit tests.
    pub fn placeholder_dead() -> Self {
        Self::from_str(&"dead".repeat(16)).expect("dead...")
    }

    /// `ecad...``
    /// A placeholder used to facilitate unit tests.
    pub fn placeholder_ecad() -> Self {
        Self::from_str(&"ecad".repeat(16)).expect("ecad...")
    }

    /// `fade...``
    /// A placeholder used to facilitate unit tests.
    pub fn placeholder_fade() -> Self {
        Self::from_str(&"fade".repeat(16)).expect("fade...")
    }
}

impl Hex32Bytes {
    /// Returns a clone of the inner bytes as a `Vec`.
    pub fn to_vec(&self) -> Vec<u8> {
        Vec::from(self.bytes())
    }

    /// Returns a references to the inner array slice.
    pub fn bytes(&self) -> [u8; 32] {
        self.bytes.clone().as_slice().try_into().expect("32 bytes")
    }
}

impl Hex32Bytes {
    /// Instantiates a new `Hex32Bytes` from the 32 bytes, by cloning them.
    pub fn from_bytes(bytes: &[u8; 32]) -> Self {
        Self {
            bytes: bytes.to_vec(),
        }
    }

    /// Tries to turn the `Vec` into a `Hex32Bytes`. Will fail
    /// if `bytes` does not have length 32.
    pub fn from_vec(bytes: Vec<u8>) -> Result<Self> {
        if bytes.len() != 32 {
            return Err(CommonError::InvalidByteCountExpected32(bytes.len()));
        }
        Ok(Self { bytes })
    }

    /// Tries to decode the string `s` into a `Hex32Bytes`. Will fail
    /// if the string is not valid hex or if the decoded bytes does
    /// not have length 32.
    pub fn from_hex(s: &str) -> Result<Self> {
        Self::from_str(s)
    }
}

#[cfg(test)]
mod tests {

    use crate::prelude::*;

    #[test]
    fn equality() {
        assert_eq!(Hex32Bytes::placeholder(), Hex32Bytes::placeholder());
        assert_eq!(
            Hex32Bytes::placeholder_other(),
            Hex32Bytes::placeholder_other()
        );
    }

    #[test]
    fn inequality() {
        assert_ne!(Hex32Bytes::placeholder(), Hex32Bytes::placeholder_other());
    }

    #[test]
    fn from_string_roundtrip() {
        let str =
            "0000000000000000000000000000000000000000000000000000000000000000";
        assert_eq!(Hex32Bytes::from_hex(str).unwrap().to_string(), str);
    }

    #[test]
    fn debug() {
        let str =
            "deaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddead";
        let hex_bytes = Hex32Bytes::placeholder();
        assert_eq!(format!("{:?}", hex_bytes), str);
    }

    #[test]
    fn display() {
        let str =
            "deaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddead";
        let hex_bytes = Hex32Bytes::placeholder();
        assert_eq!(format!("{}", hex_bytes), str);
    }

    #[test]
    fn to_hex() {
        let str =
            "deaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddead";
        let hex_bytes = Hex32Bytes::placeholder();
        assert_eq!(hex_bytes.to_string(), str);
    }

    #[test]
    fn json_roundtrip() {
        let model = Hex32Bytes::placeholder();
        assert_json_value_eq_after_roundtrip(
            &model,
            json!("deaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddead"),
        );
    }

    #[test]
    fn json_roundtrip_fails_for_invalid() {
        assert_json_value_fails::<Hex32Bytes>(json!("not even hex"));
        assert_json_value_fails::<Hex32Bytes>(json!("deadbeef"));
        assert_json_value_fails::<Hex32Bytes>(json!("deaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddead"));
    }

    #[test]
    fn from_bytes_roundtrip() {
        let bytes = [0u8; 32];
        assert_eq!(Hex32Bytes::from_bytes(&bytes).bytes(), bytes);
    }

    #[test]
    fn from_vec_roundtrip() {
        let vec = Vec::from([0u8; 32]);
        assert_eq!(Hex32Bytes::from_vec(vec.clone()).unwrap().to_vec(), vec);
    }

    #[test]
    fn invalid_str() {
        let s = "invalid str";
        assert_eq!(
            Hex32Bytes::from_str(s),
            Err(CommonError::StringNotHex(s.to_owned()))
        );
    }

    #[test]
    fn invalid_len() {
        assert_eq!(
            Hex32Bytes::from_vec(Vec::from([0u8; 5])),
            Err(CommonError::InvalidByteCountExpected32(5))
        )
    }

    #[test]
    fn random() {
        let mut set: HashSet<Vec<u8>> = HashSet::new();
        let n = 100;
        for _ in 0..n {
            let bytes = Hex32Bytes::generate();
            set.insert(bytes.to_vec());
        }
        assert_eq!(set.len(), n);
    }
}
